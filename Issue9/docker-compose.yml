version: '3.9'
services:
  # PostgreSQL (db) : 이미지 정보 저장할 데이터베이스
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: imagedb
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app_net
    restart: always

  # Kafka & Zookeeper : 메세지 브로커 역할
  #                     이미지 UUID를 'embedding-service'로 전달
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - app_net
    restart: always

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - app_net
    restart: always

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - app_net
    restart: always

  # image service : 이미지 업로드, 데이터베이스에 저장, Kafka에 UUID 저장
  image-service:
    build:
      context: ./image-service
    ports:
      - "5001:5000"
    environment:
      DATABASE_URI: postgresql://user:password@db:5432/imagedb
      KAFKA_BROKER: kafka:9092
      WEAVIATE_URL: "http://weaviate:8080" 
    volumes:
      - image_data:/mnt/data/images  
    depends_on:
      - db
      - kafka
    networks:
      - app_net
    restart: always

  # embedding service : Kafka에서 UUID 소비, 해당 이미지 임베딩 해서 weaviate에 저장
  embedding-worker-1:
    build:
      context: ./embedding-worker-1
    environment:
      DATABASE_URI: postgresql://user:password@db:5432/imagedb
      KAFKA_BROKER: kafka:9092
      WEAVIATE_URL: http://weaviate:8080
    depends_on:
      - kafka
      - weaviate
    volumes:
      - image_data:/mnt/data/images
    networks:
      - app_net
    restart: always

  embedding-worker-2:
    build:
      context: ./embedding-worker-2
    environment:
      DATABASE_URI: postgresql://user:password@db:5432/imagedb
      KAFKA_BROKER: kafka:9092
      WEAVIATE_URL: http://weaviate:8080
    depends_on:
      - kafka
      - weaviate
    volumes:
      - image_data:/mnt/data/images
    networks:
      - app_net
    restart: always


  # weaviate : 이미지 임베딩을 저장하고 관리
  weaviate:
    image: semitechnologies/weaviate:latest
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: '10000'
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: "weaviate"
      CLUSTER_GOSSIP_BIND_PORT: "7100"
      CLUSTER_DATA_BIND_PORT: "7101"
      CLUSTER_JOIN: "weaviate" # 단일 노드로 설정
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - app_net
    restart: always

volumes:
  db_data:
  image_data:
  weaviate_data:

networks:
  app_net:
    driver: bridge
